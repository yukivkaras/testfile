{"version":3,"sources":["table.js","App.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","key","datas","address_name","restaurant_name","FoodTable","props","handleClick","rand","Math","floor","random","dataT","push","setState","data","document","getElementById","disabled","innerText","backgroundColor","state","style","textAlign","marginTop","marginBottom","id","type","size","onClick","this","dataSource","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAGQA,EAAU,CAAC,CACbC,MAAO,gBACPC,UAAW,gBACXC,IAAK,iBAEP,CACEF,MAAO,eACPC,UAAW,eACXC,IAAK,gBAEP,CACEF,MAAO,kBACPE,IAAK,kBACLD,UAAW,oBAKTE,EAAQ,CAAC,CACXC,aAAc,2BACdC,gBAAiB,sBAEnB,CAEAD,aAAc,2BACdC,gBAAiB,4BAGjB,CACED,aAAc,2BAChBC,gBAAiB,sBACf,CACAD,aAAc,2BAChBC,gBAAiB,4BAEjB,CACED,aAAc,2BAChBC,gBAAiB,4BAEjB,CACED,aAAc,2BAChBC,gBAAiB,4BAEjB,CACED,aAAc,2BAChBC,gBAAiB,kCAEjB,CACED,aAAc,2BAChBC,gBAAiB,mCA+BNC,E,YA3Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGNC,YAAc,WACV,IAAIC,EAAOC,KAAKC,MAAoB,EAAdD,KAAKE,UACvBC,EAAQ,GACZA,EAAMC,KAAKX,EAAMM,IACjB,EAAKM,SAAS,CAACC,KAAKH,IACpBI,SAASC,eAAe,QAAQC,UAAW,EAC3CF,SAASC,eAAe,QAAQE,UAAY,qBAC5CH,SAASC,eAAe,QAAQG,gBAAkB,UATtD,EAAKC,MAAQ,CAAEN,KAAKb,GAFH,E,sEAeb,OACE,yBAAKoB,MAAO,CAACC,UAAU,SAASC,UAAU,KAAKC,aAAa,OAC5D,uBAAQC,GAAG,OAAOC,KAAK,UAAUC,KAAK,QAAQN,MAAO,CAACF,gBAAgB,SAAUS,QAASC,KAAKvB,aAA9F,6BAGE,uBAAOT,QAASA,EAASiC,WAAYD,KAAKT,MAAMN,Y,GArBpCiB,aC1CTC,E,iLANX,OACC,kBAAC,EAAD,U,GAJaD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7949e40.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button } from 'antd';\r\n\r\n  const columns = [{\r\n      title: 'Restaurant_id',\r\n      dataIndex: 'restaurant_id',\r\n      key: 'restaurant_id',\r\n    },\r\n    {\r\n      title: 'Address_name',\r\n      dataIndex: 'address_name',\r\n      key: 'address_name',\r\n    },\r\n    {\r\n      title: 'Restaurant_name',\r\n      key: 'restaurant_name',\r\n      dataIndex: 'restaurant_name',\r\n    }\r\n  ];\r\n\r\n\r\n  const datas = [{\r\n      address_name: \"宝龙广场\",\r\n      restaurant_name: \"海底捞\",\r\n    },\r\n    {\r\n \r\n    address_name: \"宝龙广场\",\r\n    restaurant_name: \"崔氏烤肉\",\r\n    \r\n    },\r\n    {\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"牛玩家\", \r\n    },{\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"秦川老碗\", \r\n    },\r\n    {\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"桂林米粉\", \r\n    },\r\n    {\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"呷脯呷脯\", \r\n    },\r\n    {\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"鱼你在一起\", \r\n    },\r\n    {\r\n      address_name: \"宝龙广场\",\r\n    restaurant_name: \"重庆鸡公煲\", \r\n    }]\r\n   \r\nclass FoodTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data:datas};\r\n  }\r\n    handleClick = () =>{\r\n        var rand = Math.floor(Math.random()*8)\r\n        var dataT = []\r\n        dataT.push(datas[rand])\r\n        this.setState({data:dataT})\r\n        document.getElementById(\"rand\").disabled = true\r\n        document.getElementById(\"rand\").innerText = \"去吃吧\"\r\n        document.getElementById(\"rand\").backgroundColor = \"yellow\"\r\n    }\r\n      render() {\r\n      \r\n        return (\r\n          <div style={{textAlign:\"center\",marginTop:\"5%\",marginBottom:\"5%\"}}>\r\n          <Button id=\"rand\" type=\"primary\" size=\"large\" style={{backgroundColor:\"green\"}} onClick={this.handleClick}>\r\n          今晚吃啥?\r\n        </Button>\r\n            <Table columns={columns} dataSource={this.state.data} />\r\n            </div>\r\n        );\r\n      }\r\n     \r\n}\r\n\r\nexport default FoodTable;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport  FoodTable  from './table.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n     <FoodTable/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}